
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000728  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000659  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000286  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  00001745  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int minutes = 0; 
int hours; 
int main(void)
{
    
	DDRB = 0x01; //configure port B as output for seconds
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x01; //configure port C as output for minutes
  94:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x01; //configure port D as output for hours 
  96:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A = (1 << WGM01); 
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 195; //set the compare match value for the timer
  9c:	83 ec       	ldi	r24, 0xC3	; 195
  9e:	87 bd       	out	0x27, r24	; 39
    while (1) 
    {
		sei(); //enable global interrupt
  a0:	78 94       	sei
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x10>

000000a4 <d2BCD>:
	}
}

int d2BCD(int Decimal){
	
	return ( ( (Decimal/10) << 4) | (Decimal % 10) ); 
  a4:	6a e0       	ldi	r22, 0x0A	; 10
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	0e 94 de 00 	call	0x1bc	; 0x1bc <__divmodhi4>
  ac:	62 95       	swap	r22
  ae:	72 95       	swap	r23
  b0:	70 7f       	andi	r23, 0xF0	; 240
  b2:	76 27       	eor	r23, r22
  b4:	60 7f       	andi	r22, 0xF0	; 240
  b6:	76 27       	eor	r23, r22
}
  b8:	86 2b       	or	r24, r22
  ba:	97 2b       	or	r25, r23
  bc:	08 95       	ret

000000be <__vector_14>:
    {
		sei(); //enable global interrupt
    }
	
}
ISR(TIMER0_COMPA_vect){//interrupt which updates the state of digital clock 
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	extratime++; 
  e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <extratime>
  e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <extratime+0x1>
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <extratime+0x1>
  ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <extratime>
	if(extratime>100){
  f2:	85 36       	cpi	r24, 0x65	; 101
  f4:	91 05       	cpc	r25, r1
  f6:	0c f4       	brge	.+2      	; 0xfa <__vector_14+0x3c>
  f8:	50 c0       	rjmp	.+160    	; 0x19a <__vector_14+0xdc>
		//digital clock logic:
		if (hours == 24){
  fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hours>
  fe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hours+0x1>
 102:	48 97       	sbiw	r24, 0x18	; 24
 104:	21 f4       	brne	.+8      	; 0x10e <__vector_14+0x50>
			//if 24 hours passed, reset hours 
			hours = 0; 
 106:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <hours+0x1>
 10a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <hours>
		} 
		if (minutes == 60){
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	cc 97       	sbiw	r24, 0x3c	; 60
 118:	69 f4       	brne	.+26     	; 0x134 <__vector_14+0x76>
			//check if minutes have moved upto 60: if yes then reset to zero and add 1 to hours
			minutes=0; //reset minutes
 11a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			hours++; 
 122:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hours>
 126:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hours+0x1>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <hours+0x1>
 130:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <hours>
			
		}
		if(seconds ==60){
 134:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seconds>
 138:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <seconds+0x1>
 13c:	8c 33       	cpi	r24, 0x3C	; 60
 13e:	91 05       	cpc	r25, r1
 140:	71 f4       	brne	.+28     	; 0x15e <__vector_14+0xa0>
			//check if seconds have moved upto 60: if yes then reset to zero and add 1 to minutes
			seconds = 0; //reset seconds
 142:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <seconds+0x1>
 146:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <seconds>
			minutes++; 
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_14+0xaa>
			
		}
		else{
			seconds++; 
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <seconds+0x1>
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seconds>
			
		}
		
		PORTB = d2BCD(seconds); //write the value of seconds to PORTB
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seconds>
 16c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <seconds+0x1>
 170:	0e 94 52 00 	call	0xa4	; 0xa4 <d2BCD>
 174:	85 b9       	out	0x05, r24	; 5
		PORTC = d2BCD(minutes); //write the value of minutes to PORTC
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	0e 94 52 00 	call	0xa4	; 0xa4 <d2BCD>
 182:	88 b9       	out	0x08, r24	; 8
		PORTD = d2BCD(hours); 
 184:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hours>
 188:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hours+0x1>
 18c:	0e 94 52 00 	call	0xa4	; 0xa4 <d2BCD>
 190:	8b b9       	out	0x0b, r24	; 11
		extratime= 0; 
 192:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <extratime+0x1>
 196:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <extratime>
		
	}
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__divmodhi4>:
 1bc:	97 fb       	bst	r25, 7
 1be:	07 2e       	mov	r0, r23
 1c0:	16 f4       	brtc	.+4      	; 0x1c6 <__divmodhi4+0xa>
 1c2:	00 94       	com	r0
 1c4:	07 d0       	rcall	.+14     	; 0x1d4 <__divmodhi4_neg1>
 1c6:	77 fd       	sbrc	r23, 7
 1c8:	09 d0       	rcall	.+18     	; 0x1dc <__divmodhi4_neg2>
 1ca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__udivmodhi4>
 1ce:	07 fc       	sbrc	r0, 7
 1d0:	05 d0       	rcall	.+10     	; 0x1dc <__divmodhi4_neg2>
 1d2:	3e f4       	brtc	.+14     	; 0x1e2 <__divmodhi4_exit>

000001d4 <__divmodhi4_neg1>:
 1d4:	90 95       	com	r25
 1d6:	81 95       	neg	r24
 1d8:	9f 4f       	sbci	r25, 0xFF	; 255
 1da:	08 95       	ret

000001dc <__divmodhi4_neg2>:
 1dc:	70 95       	com	r23
 1de:	61 95       	neg	r22
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255

000001e2 <__divmodhi4_exit>:
 1e2:	08 95       	ret

000001e4 <__udivmodhi4>:
 1e4:	aa 1b       	sub	r26, r26
 1e6:	bb 1b       	sub	r27, r27
 1e8:	51 e1       	ldi	r21, 0x11	; 17
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <__udivmodhi4_ep>

000001ec <__udivmodhi4_loop>:
 1ec:	aa 1f       	adc	r26, r26
 1ee:	bb 1f       	adc	r27, r27
 1f0:	a6 17       	cp	r26, r22
 1f2:	b7 07       	cpc	r27, r23
 1f4:	10 f0       	brcs	.+4      	; 0x1fa <__udivmodhi4_ep>
 1f6:	a6 1b       	sub	r26, r22
 1f8:	b7 0b       	sbc	r27, r23

000001fa <__udivmodhi4_ep>:
 1fa:	88 1f       	adc	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	5a 95       	dec	r21
 200:	a9 f7       	brne	.-22     	; 0x1ec <__udivmodhi4_loop>
 202:	80 95       	com	r24
 204:	90 95       	com	r25
 206:	bc 01       	movw	r22, r24
 208:	cd 01       	movw	r24, r26
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>

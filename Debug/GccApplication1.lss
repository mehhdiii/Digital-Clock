
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c8  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000240  00000000  00000000  00000f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int seconds = 0; 
int minutes = 0; 
int main(void)
{
    
	DDRB = 0x01; //configure port B as output for seconds
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x01; //configure port C as output for minutes
  94:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x01; //configure port D as output for hours 
  96:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A = (1 << WGM01); 
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 195; //set the compare match value for the timer
  9c:	83 ec       	ldi	r24, 0xC3	; 195
  9e:	87 bd       	out	0x27, r24	; 39
    while (1) 
    {
		sei(); //enable global interrupt
  a0:	78 94       	sei
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x10>

000000a4 <__vector_14>:
    }
	
}
ISR(TIMER0_COMPA_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	extratime++; 
  b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <extratime>
  b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <extratime+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <extratime+0x1>
  c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <extratime>
	if(extratime>100){
  c4:	85 36       	cpi	r24, 0x65	; 101
  c6:	91 05       	cpc	r25, r1
  c8:	04 f1       	brlt	.+64     	; 0x10a <__vector_14+0x66>
		
		if(seconds ==60){
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seconds>
  ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <seconds+0x1>
  d2:	8c 33       	cpi	r24, 0x3C	; 60
  d4:	91 05       	cpc	r25, r1
  d6:	51 f4       	brne	.+20     	; 0xec <__vector_14+0x48>
			//check if seconds have moved upto 60: if yes then reset to zero and add 1 to minutes
			minutes++; 
  d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <__vector_14+0x52>
		}
		else{
			seconds++; 
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <seconds+0x1>
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seconds>
			
		}
		
		PORTB = seconds; //write the value of seconds to PORTB
  f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seconds>
  fa:	85 b9       	out	0x05, r24	; 5
		PORTC = minutes; //write the value of minutes to PORTC
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	88 b9       	out	0x08, r24	; 8
		extratime= 0; 
 102:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <extratime+0x1>
 106:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <extratime>
		
	}
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
